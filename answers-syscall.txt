问题1
Looking at the backtrace output, which function called syscall?
通过堆栈回溯可以看到，函数 usertrap() 调用了 syscall() 函数。
问题2
What is the value of p->trapframe->a7 and what does that value represent? 
键入 n 几次以逐步通过 struct proc *p = myproc(); 通过此语句后，键入 p /x *p ，它将以十六进制打印当前进程 proc struct 。
(gdb) n
(gdb) n
(gdb) p/x *p
由问题2所问，输入命令查看 p->trapframe->a7 的值是多少。
(gdb) p p->trapframe->a7













得到 a7 的值为 7 。根据参考教材 第二章和 user/initcode.S 中的代码可知，这个 a7 寄存器中保存了将要执行的系统调用号。这里的系统调用号为 7，在 kernel/syscall.h 中可以找到，这个系统调用为 SYS_exec。

问题3
What was the previous mode that the CPU was in?
系统调用运行在内核模式时（kernel mode)，可以通过 Supervisor Status Register (sstatus) 来查看当前 CPU 的状态。
输入 GDB 命令来查看 sstatus 寄存器。通过 p/t 以二进制打印。
(gdb) p/t $sstatus

$4 = 100010
查阅官方文档关于SSP位的解释可知：
SPP 位指示进入管理员模式之前 hart 执行的特权级别。 当采取陷阱时，如果陷阱源自用户模式，则 SPP 设置为 0，否则设置为 1。 当执行 SRET 指令（见第 3.3.2 节）从陷阱处理程序返回时，如果 SPP 位为 0，则特权级别设置为用户模式，如果 SPP 位为 1，则设置为超级用户模式； 然后将 SPP 设置为 0。

根据 sstatus 的二进制值 100010 可知，SPP 位是 0，那么在执行系统调用陷入内核之前的特权级别就是 user mode。

答案：用户模式（User Mode）

问题4
Write down the assembly instruction the kernel is panicing at. Which register corresponds to the varialable num?
在本实验的后续部分（或后续实验）中，可能会出现编程错误，导致 xv6 内核崩溃。例如，将位于 kernel/syscall.c文件中syscall 函数中的语句 num = p->trapframe->a7; 替换为 num = * (int *) 0。

然后运行 make qemu。这样会看到一个 panic 信息。

这里的 sepc 指代内核发生 panic 的代码地址。可以在 kernel/kernel.asm 中查看编译后的完整内核汇编代码，在其中搜索这个地址既可以找到使内核 panic 的代码。在这里spec是 0x0000000080001ff4，所以在 kernel/kernel.asm 中搜索 80001ff4。

可以看到，果然是 num = * (int *) 0; 使内核 panic。对应的汇编则是 lw a3,0(zero)。
这条汇编代码代表：将内存中地址从 0 开始的一个字 word （2 bytes) 大小的数据加载到寄存器 a3 中。

答案：内核 panic 在 lw a3,0(zero)。num 代表 a3 寄存器。

问题5
Why does the kernel crash? Hint: look at figure 3-3 in the text; is address 0 mapped in the kernel address space? Is that confirmed by the value in scause above?
再次运行虚拟器和 GDB 调试。将断点设置在发生 panic 处。再次输入 n 之后会发生 panic，此时输入 Ctrl + C 结束。p $scause查看 scase 寄存器，它代指内核 panic 的原因。
(gdb) b *0x0000000080001ff4
Breakpoint 1 at 0x80001ff4: file kernel/syscall.c, line 138.
(gdb) c

Thread 1 hit Breakpoint 1, syscall () at kernel/syscall.c:138
(gdb) layout asm
(gdb) n
(gdb) Ctrl + C # 键盘输入结束Thread
(gdb) p $scause













得到$1 = 13，查表。

所以这里的 13 代表 Load page fault 。就是从内存地址 0 中 加载数据到寄存器 a3 时出错。要知道地址0处的数据，查阅教材 book-riscv-rev3.pdf 的 Figure 3.3。
可以知道在左侧 Virtual Address 中的地址 0 处对应右侧 Physical Address 的 Unused，表示这个地址没有被使用。
而 Kernel 是从虚拟地址的 0x80000000 处开始的。

于是得到问题5的答案：
答案：内核因为加载了一个未使用的地址 0 处的内存数据而崩溃（Load page fault）。地址 0 并不映射到内核空间中（从 0x80000000 开始）。scause 中的异常代码证实了上述观点。

问题6
What is the name of the binary that was running when the kernel paniced? What is its process id (pid)?
上述 scuase 指明了内核 panic 的原因。但是有时候我们需要知道，是哪一个用户程序调用 syscall 时发生了 panic。这可以通过打印 proc 结构体中的 name 来查看。
(gdb) p p->name











得到输出$1 = "initcode\000\000\000\000\000\000\000"可知这个用户程序是 initcode。
打印 proc 结构体可以查看这个进程的其他信息。
(gdb) p *p


可以看到，这个initcode 的 pid 为 1.
则可以得到问题6的答案。
答案：这个二进制的名字为 initcode ，其 process id 为 1.
